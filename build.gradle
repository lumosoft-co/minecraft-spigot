import dev.s7a.gradle.minecraft.server.tasks.LaunchMinecraftServerTask
import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2' // Add the Shadow plugin
    id 'dev.s7a.gradle.minecraft.server' version '2.1.0'
}

group = 'com.agoramp'
version = '1.0-SNAPSHOT'

targetCompatibility = 1.8
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    shadow 'com.github.lumosoft-co:fulfillment-core-java:54a63c6e04'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// Configure the shadowJar task
shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set('')

    relocate 'com.google.gson', 'com.agoramp.gson'
    relocate 'io.netty', 'com.agoramp.netty'
    relocate 'org.reactivestreams', 'com.agoramp.reactive.streams'
    relocate 'reactor', 'com.agoramp.reactive'
}

build.dependsOn(shadowJar)

tasks.register('testPlugin', LaunchMinecraftServerTask) {
    dependsOn 'build'

    doFirst {
        copy {
            from "$buildDir/libs"
            into "$buildDir/MinecraftServer/plugins"
            include "${project.name}-${project.version}.jar"
            rename { String fileName ->
                fileName.replace("${project.name}-${project.version}", "${project.name}")
            }
        }
    }

    jarUrl = paper('1.16.5')
    agreeEula = true
    jvmArgument = ['-DAGORA-API-URL=http://localhost:4000']
}

static String paper(String version) {
    String versionsUrl = "https://papermc.io/api/v2/projects/paper/versions"
    String versionsJson = new URL("$versionsUrl/$version").text
    def jsonSlurper = new JsonSlurper()
    def versionData = jsonSlurper.parseText(versionsJson)
    def build = versionData.builds.max()
    return "$versionsUrl/$version/builds/$build/downloads/paper-$version-${build}.jar"
}

