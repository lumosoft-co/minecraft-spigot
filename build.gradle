import dev.s7a.gradle.minecraft.server.tasks.LaunchMinecraftServerTask
import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2' // Add the Shadow plugin
    id 'dev.s7a.gradle.minecraft.server' version '2.1.0'
    id "com.apollographql.apollo3" version "3.8.1"
}

group = 'com.agoramp'
version = '1.0-SNAPSHOT'

targetCompatibility = 1.8
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
    mavenLocal()
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    shadow 'com.agoramp:fulfillment-core-java:1.0-SNAPSHOT'
    shadow 'com.agoramp:minecraft-util:1.0-SNAPSHOT'
    implementation 'com.comphenix.protocol:ProtocolLib:5.0.0'

    implementation 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// Configure the shadowJar task
shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set('')

    exclude 'com/google/*'
}

build.dependsOn(shadowJar)

tasks.register('testPlugin', LaunchMinecraftServerTask) {
    dependsOn 'build'

    doFirst {
        copy {
            from "$buildDir/libs"
            into "$buildDir/MinecraftServer/plugins"
            include "${project.name}-${project.version}.jar"
            rename { String fileName ->
                fileName.replace("${project.name}-${project.version}", "${project.name}")
            }
        }
    }

    jarUrl = paper('1.16.5')
    agreeEula = true
    //jvmArgument = ['-DAGORA-API-URL=http://localhost:4000']
}

task copyPlugin(type: Copy) {
    dependsOn(build)
    from "$buildDir/libs"
    into "$projectDir/test-server/plugins"
    include "${project.name}-${project.version}.jar"
    rename { String fileName ->
        fileName.replace("${project.name}-${project.version}", "${project.name}")
    }
}

static String paper(String version) {
    String versionsUrl = "https://papermc.io/api/v2/projects/paper/versions"
    String versionsJson = new URL("$versionsUrl/$version").text
    def jsonSlurper = new JsonSlurper()
    def versionData = jsonSlurper.parseText(versionsJson)
    def build = versionData.builds.max()
    return "$versionsUrl/$version/builds/$build/downloads/paper-$version-${build}.jar"
}

apollo {
    service("service") {
        packageName.set("com.agoramp.minecraft.models.graphql")
    }
}

